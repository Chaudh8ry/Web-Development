/* grid-template-rows: defines the height of each row in the grid container. You can specify the height of each row individually, using fixed values like 100px, relative values like 1fr (fraction of the available space), or other length units like percentages.

grid-template-columns: defines the width of each column in the grid container. Similar to grid-template-rows, you can specify the width of each column using fixed values, relative values, or other length units. */
.container{
    display: grid;
    grid-template-rows: 100px 100px 100px 100px 100px 100px;
    grid-template-columns: 100px 100px 100px 100px 100px 100px;
}

.item{
    border-radius: 5px;
    padding: 10px;
    background-color: rgb(207 232 220);
    border: 2px solid rgb(79 185 227);
}

.item1{
    grid-row-start: 1;
    grid-row-end: 3;
    grid-column-start: 1;
    grid-column-end: 5;
}

/* Use of "Grid-row" & "Grid-column" */
.item2{
    grid-row: 1 / 3; /* Places the grid item from row line 1 to row line 3 */
    grid-column: 5 / 7; /* Places the grid item from column line 5 to row line 7 */
}

/* Use of "Span" */
.item3{
    /* the span keyword is used to define how many grid tracks (rows or columns) a grid item should span. It's particularly useful when you want an item to extend across multiple tracks without explicitly specifying the ending track. */
    grid-row: span 3; /* means that the grid item will start at its current position and span across 3 rows. */
    grid-column: span 3; /* means that the grid item will start at its current position and span across 3 columns. */
}

/* Use of "Grid-Area" */
.item4{
    grid-area: 3 / 4 / 5 / 7;  /* 'Row-Start / Col-Start / Row-End / Col-End' */
}


/* Layering of Items */
.item5{
    grid-area: 2 / 4 / 4 / 6; /* Layering will be created */
    /* z-index: -1; */
}